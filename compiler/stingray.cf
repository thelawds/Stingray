comment "//" ;
comment "/*" "*/" ;

Program.                        Program_ ::= [Decl] [Statement];
terminator Decl "";

Declaration.                    Decl ::= "declare" Ident "as" TypeReference;

NothingType.                    TypeReference ::= "Nothing";
BoolType.                       TypeReference ::= "Boolean";
IntegerType.                    TypeReference ::= "Integer";
DoubleType.                     TypeReference ::= "Double";
StringType.                     TypeReference ::= "String";
AutoType.                       TypeReference ::= "Auto";
FunctionDeclType.               TypeReference ::= FuncDecl;
FunctionDefType.                TypeReference ::= FuncDefn;
ArrayType.                      TypeReference ::= TypeReference "[]";
ClassType.                      TypeReference ::= ClassDecl;
UserType.                       TypeReference ::= Ident;

ClassDeclaration.               ClassDecl ::= "class" Extends Statics "{" CBody "}";

ExtendsEmpty.                   Extends ::= ;
ExtendsList.                    Extends ::= "<" Ident ">";
terminator Ident ",";

FieldDeclaration.               FieldDef ::= Ident ":" TypeReference;
FieldDefinition.                FieldDef ::= Ident Value;
FieldDefinitionAsc.             FieldDef ::= Ident ":" TypeReference Value;

StaticsEmpty.                   Statics ::= ;
StaticsBody.                    Statics ::= "(" [FieldDef] ")";
terminator FieldDef "";

ClassBody.                      CBody ::= [FieldDef];
terminator FieldDef "";

FunctionDeclaration.            FuncDecl ::= FuncRange "->" FuncDomain;
FunctionDefinition.             FuncDefn ::= FuncRangeNamed "->" FuncDomain Body_;

FunctionDomain.                 FuncDomain ::= TypeReference;
FunctionRangeSingle.            FuncRange  ::= TypeReference;
FunctionRangeMultiple.          FuncRange  ::= "(" TypeReference "," [TypeReference] ")";
separator TypeReference ",";

FunctionParameter.              FuncParam ::= TypeReference Ident;

FunctionRangeSingleNamed.       FuncRangeNamed ::= FuncParam;
FunctionRangeMultipleNamed.     FuncRangeNamed ::= "(" [FuncParam] ")";
separator FuncParam ",";

StatementVarDecl.               Statement ::= "let" Ident ":" TypeReference;
StatementVarDef.                Statement ::= "let" Ident Value;
StatementVarDefAsc.             Statement ::= "let" Ident ":" TypeReference Value;
StatementAssignment.            Statement ::= Expression Value;
StatementIf.                    Statement ::= StatementIf_;
StatementWhile.                 Statement ::= "while" Expression Body_;
StatementFor.                   Statement ::= "for" Ident "in" RangeExpr Body_;
StatementReturnNone.            Statement ::= "return";
StatementReturnValue.           Statement ::= "return" Expression;
StatementFunctionCall.          Statement ::= FuncCall;

IfStatement.                    StatementIf_ ::= "if" Expression Body_;
IfElseIfStatement.              StatementIf_ ::= "if" Expression Body_ "else" StatementIf_;
IfElseStatement.                StatementIf_ ::= "if" Expression Body_ "else" Body_;

Body.                           Body_ ::= "{" [Statement] "}";

ValueArrowed.                   Value ::= "<-" Expression;
ValueBraced.                    Value ::= "{" Expression "}";

terminator Statement "";

MethodReference.                Expression ::= Expression "::" Ident;

RelationalEquals.               Expression5 ::= Expression5 "=" Expression6;
RelationalNotEquals.            Expression5 ::= Expression5 "!=" Expression6;
RelationalLess.                 Expression5 ::= Expression5 "<" Expression6;
RelationalGreater.              Expression5 ::= Expression5 ">" Expression6;
RelationalLessOrEqual.          Expression5 ::= Expression5 "<=" Expression6;
RelationalGreaterOrEqual.       Expression5 ::= Expression5 ">=" Expression6;

ArithmeticSum.                  Expression6 ::= Expression6 "+" Expression7;
ArithmeticDifference.           Expression6 ::= Expression6 "-" Expression7;
ArithmeticProduct.              Expression7 ::= Expression7 "*" Expression8;
ArithmeticQuotient.             Expression7 ::= Expression7 "/" Expression8;
ArithmeticModulus.              Expression7 ::= Expression7 "%" Expression8;
ArithmeticExponentiation.       Expression8 ::= Expression8 "^" Expression9;

LogicalUnaryNot.                Expression4 ::= "not" Expression3;
LogicalConjunction.             Expression3 ::= Expression3 "and" Expression4;
LogicalDisjunction.             Expression2 ::= Expression2 "or" Expression3;
LogicalExclusiveDisjunction.    Expression2 ::= Expression2 "xor" Expression3;
LogicalImplication.             Expression1 ::= Expression1 "=>" Expression2;
LogicalEquivalence.             Expression1 ::= Expression1 "<=>" Expression2;

_.                              Expression9 ::= "(" Expression ")";

coercions Expression 10;

UnaryHashCode.                  Expression9 ::= "#" Expression10;
UnaryMinus.                     Expression9 ::= "-" Expression10;

TrueTerm.                       Expression10 ::= "true";
FalseTerm.                      Expression10 ::= "false";
EmptyTerm.                      Expression10 ::= "empty";
StringTerm.                     Expression10 ::= String;
IntegerTerm.                    Expression10 ::= Integer;
DoubleTerm.                     Expression10 ::= Double;
VariableReferenceTerm.          Expression10 ::= Ident;

ArrayReferenceTerm.             Expression10 ::= Expression10 "[" Expression "]";
FieldReferenceTerm.             Expression10 ::= Expression10 "." Ident;

FunctionCallExpr.               Expression10 ::= FuncCall;
FunctionCall.                   FuncCall     ::= Expression10 "(" [Expression] ")";      

separator Expression ",";

ArrayInitializer.               Expression10 ::= "[" [Expression] "]";
separator Expression ",";

RangeExpressionTerm.            Expression10 ::= RangeExpr;

RangeExpression.                RangeExpr ::= UnsteppedRangeExpression;
SteppedRangeExpression.         RangeExpr ::= UnsteppedRangeExpression ":" Integer;

OpenRange.                      UnsteppedRangeExpression ::= "(" RangeBody_ ")";
ClosedRange.                    UnsteppedRangeExpression ::= "[" RangeBody_ "]";
LeftClosedRightOpenedRange.     UnsteppedRangeExpression ::= "[" RangeBody_ ")";
LeftOpenedRightClosedRange.     UnsteppedRangeExpression ::= "(" RangeBody_ "]";

RangeBody.                      RangeBody_ ::= Integer ";" Integer;
