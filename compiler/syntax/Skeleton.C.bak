/* File generated by the BNF Converter (bnfc 2.9.4). */

/*** Visitor Design Pattern Skeleton. ***/
/* This implements the common visitor design pattern.
   Note that this method uses Visitor-traversal of lists, so
   List->accept() does NOT traverse the list. This allows different
   algorithms to use context information differently. */

#include "Skeleton.H"



void Skeleton::visitProgram_(Program_ *t) {} //abstract class
void Skeleton::visitDecl(Decl *t) {} //abstract class
void Skeleton::visitTypeReference(TypeReference *t) {} //abstract class
void Skeleton::visitClassDecl(ClassDecl *t) {} //abstract class
void Skeleton::visitExtends(Extends *t) {} //abstract class
void Skeleton::visitFieldDef(FieldDef *t) {} //abstract class
void Skeleton::visitStatics(Statics *t) {} //abstract class
void Skeleton::visitCBody(CBody *t) {} //abstract class
void Skeleton::visitFuncDecl(FuncDecl *t) {} //abstract class
void Skeleton::visitFuncDefn(FuncDefn *t) {} //abstract class
void Skeleton::visitFuncDomain(FuncDomain *t) {} //abstract class
void Skeleton::visitFuncRange(FuncRange *t) {} //abstract class
void Skeleton::visitFuncParam(FuncParam *t) {} //abstract class
void Skeleton::visitFuncRangeNamed(FuncRangeNamed *t) {} //abstract class
void Skeleton::visitStatement(Statement *t) {} //abstract class
void Skeleton::visitStatementIf_(StatementIf_ *t) {} //abstract class
void Skeleton::visitBody_(Body_ *t) {} //abstract class
void Skeleton::visitValue(Value *t) {} //abstract class
void Skeleton::visitExpression(Expression *t) {} //abstract class
void Skeleton::visitFuncCall(FuncCall *t) {} //abstract class
void Skeleton::visitRangeExpr(RangeExpr *t) {} //abstract class
void Skeleton::visitUnsteppedRangeExpression(UnsteppedRangeExpression *t) {} //abstract class
void Skeleton::visitRangeBody_(RangeBody_ *t) {} //abstract class

void Skeleton::visitProgram(Program *program)
{
  /* Code For Program Goes Here */

  if (program->listdecl_) program->listdecl_->accept(this);
  if (program->liststatement_) program->liststatement_->accept(this);

}

void Skeleton::visitDeclaration(Declaration *declaration)
{
  /* Code For Declaration Goes Here */

  visitIdent(declaration->ident_);
  if (declaration->typereference_) declaration->typereference_->accept(this);

}

void Skeleton::visitNothingType(NothingType *nothing_type)
{
  /* Code For NothingType Goes Here */


}

void Skeleton::visitBoolType(BoolType *bool_type)
{
  /* Code For BoolType Goes Here */


}

void Skeleton::visitIntegerType(IntegerType *integer_type)
{
  /* Code For IntegerType Goes Here */


}

void Skeleton::visitDoubleType(DoubleType *double_type)
{
  /* Code For DoubleType Goes Here */


}

void Skeleton::visitStringType(StringType *string_type)
{
  /* Code For StringType Goes Here */


}

void Skeleton::visitSgAutoType(SgAutoType *sg_auto_type)
{
  /* Code For SgAutoType Goes Here */


}

void Skeleton::visitFunctionDeclType(FunctionDeclType *function_decl_type)
{
  /* Code For FunctionDeclType Goes Here */

  if (function_decl_type->funcdecl_) function_decl_type->funcdecl_->accept(this);

}

void Skeleton::visitFunctionDefType(FunctionDefType *function_def_type)
{
  /* Code For FunctionDefType Goes Here */

  if (function_def_type->funcdefn_) function_def_type->funcdefn_->accept(this);

}

void Skeleton::visitArrayType(ArrayType *array_type)
{
  /* Code For ArrayType Goes Here */

  if (array_type->typereference_) array_type->typereference_->accept(this);

}

void Skeleton::visitClassType(ClassType *class_type)
{
  /* Code For ClassType Goes Here */

  if (class_type->classdecl_) class_type->classdecl_->accept(this);

}

void Skeleton::visitUserType(UserType *user_type)
{
  /* Code For UserType Goes Here */

  visitIdent(user_type->ident_);

}

void Skeleton::visitClassDeclaration(ClassDeclaration *class_declaration)
{
  /* Code For ClassDeclaration Goes Here */

  if (class_declaration->extends_) class_declaration->extends_->accept(this);
  if (class_declaration->statics_) class_declaration->statics_->accept(this);
  if (class_declaration->cbody_) class_declaration->cbody_->accept(this);

}

void Skeleton::visitExtendsEmpty(ExtendsEmpty *extends_empty)
{
  /* Code For ExtendsEmpty Goes Here */


}

void Skeleton::visitExtendsList(ExtendsList *extends_list)
{
  /* Code For ExtendsList Goes Here */

  visitIdent(extends_list->ident_);

}

void Skeleton::visitFieldDeclaration(FieldDeclaration *field_declaration)
{
  /* Code For FieldDeclaration Goes Here */

  visitIdent(field_declaration->ident_);
  if (field_declaration->typereference_) field_declaration->typereference_->accept(this);

}

void Skeleton::visitFieldDefinition(FieldDefinition *field_definition)
{
  /* Code For FieldDefinition Goes Here */

  visitIdent(field_definition->ident_);
  if (field_definition->value_) field_definition->value_->accept(this);

}

void Skeleton::visitFieldDefinitionAsc(FieldDefinitionAsc *field_definition_asc)
{
  /* Code For FieldDefinitionAsc Goes Here */

  visitIdent(field_definition_asc->ident_);
  if (field_definition_asc->typereference_) field_definition_asc->typereference_->accept(this);
  if (field_definition_asc->value_) field_definition_asc->value_->accept(this);

}

void Skeleton::visitStaticsEmpty(StaticsEmpty *statics_empty)
{
  /* Code For StaticsEmpty Goes Here */


}

void Skeleton::visitStaticsBody(StaticsBody *statics_body)
{
  /* Code For StaticsBody Goes Here */

  if (statics_body->listfielddef_) statics_body->listfielddef_->accept(this);

}

void Skeleton::visitClassBody(ClassBody *class_body)
{
  /* Code For ClassBody Goes Here */

  if (class_body->listfielddef_) class_body->listfielddef_->accept(this);

}

void Skeleton::visitFunctionDeclaration(FunctionDeclaration *function_declaration)
{
  /* Code For FunctionDeclaration Goes Here */

  if (function_declaration->funcrange_) function_declaration->funcrange_->accept(this);
  if (function_declaration->funcdomain_) function_declaration->funcdomain_->accept(this);

}

void Skeleton::visitFunctionDefinition(FunctionDefinition *function_definition)
{
  /* Code For FunctionDefinition Goes Here */

  if (function_definition->funcrangenamed_) function_definition->funcrangenamed_->accept(this);
  if (function_definition->funcdomain_) function_definition->funcdomain_->accept(this);
  if (function_definition->body__) function_definition->body__->accept(this);

}

void Skeleton::visitFunctionDomain(FunctionDomain *function_domain)
{
  /* Code For FunctionDomain Goes Here */

  if (function_domain->typereference_) function_domain->typereference_->accept(this);

}

void Skeleton::visitFunctionRangeSingle(FunctionRangeSingle *function_range_single)
{
  /* Code For FunctionRangeSingle Goes Here */

  if (function_range_single->typereference_) function_range_single->typereference_->accept(this);

}

void Skeleton::visitFunctionRangeMultiple(FunctionRangeMultiple *function_range_multiple)
{
  /* Code For FunctionRangeMultiple Goes Here */

  if (function_range_multiple->typereference_) function_range_multiple->typereference_->accept(this);
  if (function_range_multiple->listtypereference_) function_range_multiple->listtypereference_->accept(this);

}

void Skeleton::visitFunctionParameter(FunctionParameter *function_parameter)
{
  /* Code For FunctionParameter Goes Here */

  if (function_parameter->typereference_) function_parameter->typereference_->accept(this);
  visitIdent(function_parameter->ident_);

}

void Skeleton::visitFunctionRangeSingleNamed(FunctionRangeSingleNamed *function_range_single_named)
{
  /* Code For FunctionRangeSingleNamed Goes Here */

  if (function_range_single_named->funcparam_) function_range_single_named->funcparam_->accept(this);

}

void Skeleton::visitFunctionRangeMultipleNamed(FunctionRangeMultipleNamed *function_range_multiple_named)
{
  /* Code For FunctionRangeMultipleNamed Goes Here */

  if (function_range_multiple_named->listfuncparam_) function_range_multiple_named->listfuncparam_->accept(this);

}

void Skeleton::visitStatementVarDecl(StatementVarDecl *statement_var_decl)
{
  /* Code For StatementVarDecl Goes Here */

  visitIdent(statement_var_decl->ident_);
  if (statement_var_decl->typereference_) statement_var_decl->typereference_->accept(this);

}

void Skeleton::visitStatementVarDef(StatementVarDef *statement_var_def)
{
  /* Code For StatementVarDef Goes Here */

  visitIdent(statement_var_def->ident_);
  if (statement_var_def->value_) statement_var_def->value_->accept(this);

}

void Skeleton::visitStatementVarDefAsc(StatementVarDefAsc *statement_var_def_asc)
{
  /* Code For StatementVarDefAsc Goes Here */

  visitIdent(statement_var_def_asc->ident_);
  if (statement_var_def_asc->typereference_) statement_var_def_asc->typereference_->accept(this);
  if (statement_var_def_asc->value_) statement_var_def_asc->value_->accept(this);

}

void Skeleton::visitStatementAssignment(StatementAssignment *statement_assignment)
{
  /* Code For StatementAssignment Goes Here */

  if (statement_assignment->expression_) statement_assignment->expression_->accept(this);
  if (statement_assignment->value_) statement_assignment->value_->accept(this);

}

void Skeleton::visitStatementIf(StatementIf *statement_if)
{
  /* Code For StatementIf Goes Here */

  if (statement_if->statementif__) statement_if->statementif__->accept(this);

}

void Skeleton::visitStatementWhile(StatementWhile *statement_while)
{
  /* Code For StatementWhile Goes Here */

  if (statement_while->expression_) statement_while->expression_->accept(this);
  if (statement_while->body__) statement_while->body__->accept(this);

}

void Skeleton::visitStatementFor(StatementFor *statement_for)
{
  /* Code For StatementFor Goes Here */

  visitIdent(statement_for->ident_);
  if (statement_for->rangeexpr_) statement_for->rangeexpr_->accept(this);
  if (statement_for->body__) statement_for->body__->accept(this);

}

void Skeleton::visitStatementReturnNone(StatementReturnNone *statement_return_none)
{
  /* Code For StatementReturnNone Goes Here */


}

void Skeleton::visitStatementReturnValue(StatementReturnValue *statement_return_value)
{
  /* Code For StatementReturnValue Goes Here */

  if (statement_return_value->expression_) statement_return_value->expression_->accept(this);

}

void Skeleton::visitStatementFunctionCall(StatementFunctionCall *statement_function_call)
{
  /* Code For StatementFunctionCall Goes Here */

  if (statement_function_call->funccall_) statement_function_call->funccall_->accept(this);

}

void Skeleton::visitIfStatement(IfStatement *if_statement)
{
  /* Code For IfStatement Goes Here */

  if (if_statement->expression_) if_statement->expression_->accept(this);
  if (if_statement->body__) if_statement->body__->accept(this);

}

void Skeleton::visitIfElseIfStatement(IfElseIfStatement *if_else_if_statement)
{
  /* Code For IfElseIfStatement Goes Here */

  if (if_else_if_statement->expression_) if_else_if_statement->expression_->accept(this);
  if (if_else_if_statement->body__) if_else_if_statement->body__->accept(this);
  if (if_else_if_statement->statementif__) if_else_if_statement->statementif__->accept(this);

}

void Skeleton::visitIfElseStatement(IfElseStatement *if_else_statement)
{
  /* Code For IfElseStatement Goes Here */

  if (if_else_statement->expression_) if_else_statement->expression_->accept(this);
  if (if_else_statement->body__1) if_else_statement->body__1->accept(this);
  if (if_else_statement->body__2) if_else_statement->body__2->accept(this);

}

void Skeleton::visitBody(Body *body)
{
  /* Code For Body Goes Here */

  if (body->liststatement_) body->liststatement_->accept(this);

}

void Skeleton::visitValueArrowed(ValueArrowed *value_arrowed)
{
  /* Code For ValueArrowed Goes Here */

  if (value_arrowed->expression_) value_arrowed->expression_->accept(this);

}

void Skeleton::visitValueBraced(ValueBraced *value_braced)
{
  /* Code For ValueBraced Goes Here */

  if (value_braced->expression_) value_braced->expression_->accept(this);

}

void Skeleton::visitMethodReference(MethodReference *method_reference)
{
  /* Code For MethodReference Goes Here */

  if (method_reference->expression_) method_reference->expression_->accept(this);
  visitIdent(method_reference->ident_);

}

void Skeleton::visitRelationalEquals(RelationalEquals *relational_equals)
{
  /* Code For RelationalEquals Goes Here */

  if (relational_equals->expression_1) relational_equals->expression_1->accept(this);
  if (relational_equals->expression_2) relational_equals->expression_2->accept(this);

}

void Skeleton::visitRelationalNotEquals(RelationalNotEquals *relational_not_equals)
{
  /* Code For RelationalNotEquals Goes Here */

  if (relational_not_equals->expression_1) relational_not_equals->expression_1->accept(this);
  if (relational_not_equals->expression_2) relational_not_equals->expression_2->accept(this);

}

void Skeleton::visitRelationalLess(RelationalLess *relational_less)
{
  /* Code For RelationalLess Goes Here */

  if (relational_less->expression_1) relational_less->expression_1->accept(this);
  if (relational_less->expression_2) relational_less->expression_2->accept(this);

}

void Skeleton::visitRelationalGreater(RelationalGreater *relational_greater)
{
  /* Code For RelationalGreater Goes Here */

  if (relational_greater->expression_1) relational_greater->expression_1->accept(this);
  if (relational_greater->expression_2) relational_greater->expression_2->accept(this);

}

void Skeleton::visitRelationalLessOrEqual(RelationalLessOrEqual *relational_less_or_equal)
{
  /* Code For RelationalLessOrEqual Goes Here */

  if (relational_less_or_equal->expression_1) relational_less_or_equal->expression_1->accept(this);
  if (relational_less_or_equal->expression_2) relational_less_or_equal->expression_2->accept(this);

}

void Skeleton::visitRelationalGreaterOrEqual(RelationalGreaterOrEqual *relational_greater_or_equal)
{
  /* Code For RelationalGreaterOrEqual Goes Here */

  if (relational_greater_or_equal->expression_1) relational_greater_or_equal->expression_1->accept(this);
  if (relational_greater_or_equal->expression_2) relational_greater_or_equal->expression_2->accept(this);

}

void Skeleton::visitArithmeticSum(ArithmeticSum *arithmetic_sum)
{
  /* Code For ArithmeticSum Goes Here */

  if (arithmetic_sum->expression_1) arithmetic_sum->expression_1->accept(this);
  if (arithmetic_sum->expression_2) arithmetic_sum->expression_2->accept(this);

}

void Skeleton::visitArithmeticDifference(ArithmeticDifference *arithmetic_difference)
{
  /* Code For ArithmeticDifference Goes Here */

  if (arithmetic_difference->expression_1) arithmetic_difference->expression_1->accept(this);
  if (arithmetic_difference->expression_2) arithmetic_difference->expression_2->accept(this);

}

void Skeleton::visitArithmeticProduct(ArithmeticProduct *arithmetic_product)
{
  /* Code For ArithmeticProduct Goes Here */

  if (arithmetic_product->expression_1) arithmetic_product->expression_1->accept(this);
  if (arithmetic_product->expression_2) arithmetic_product->expression_2->accept(this);

}

void Skeleton::visitArithmeticQuotient(ArithmeticQuotient *arithmetic_quotient)
{
  /* Code For ArithmeticQuotient Goes Here */

  if (arithmetic_quotient->expression_1) arithmetic_quotient->expression_1->accept(this);
  if (arithmetic_quotient->expression_2) arithmetic_quotient->expression_2->accept(this);

}

void Skeleton::visitArithmeticModulus(ArithmeticModulus *arithmetic_modulus)
{
  /* Code For ArithmeticModulus Goes Here */

  if (arithmetic_modulus->expression_1) arithmetic_modulus->expression_1->accept(this);
  if (arithmetic_modulus->expression_2) arithmetic_modulus->expression_2->accept(this);

}

void Skeleton::visitArithmeticExponentiation(ArithmeticExponentiation *arithmetic_exponentiation)
{
  /* Code For ArithmeticExponentiation Goes Here */

  if (arithmetic_exponentiation->expression_1) arithmetic_exponentiation->expression_1->accept(this);
  if (arithmetic_exponentiation->expression_2) arithmetic_exponentiation->expression_2->accept(this);

}

void Skeleton::visitLogicalUnaryNot(LogicalUnaryNot *logical_unary_not)
{
  /* Code For LogicalUnaryNot Goes Here */

  if (logical_unary_not->expression_) logical_unary_not->expression_->accept(this);

}

void Skeleton::visitLogicalConjunction(LogicalConjunction *logical_conjunction)
{
  /* Code For LogicalConjunction Goes Here */

  if (logical_conjunction->expression_1) logical_conjunction->expression_1->accept(this);
  if (logical_conjunction->expression_2) logical_conjunction->expression_2->accept(this);

}

void Skeleton::visitLogicalDisjunction(LogicalDisjunction *logical_disjunction)
{
  /* Code For LogicalDisjunction Goes Here */

  if (logical_disjunction->expression_1) logical_disjunction->expression_1->accept(this);
  if (logical_disjunction->expression_2) logical_disjunction->expression_2->accept(this);

}

void Skeleton::visitLogicalExclusiveDisjunction(LogicalExclusiveDisjunction *logical_exclusive_disjunction)
{
  /* Code For LogicalExclusiveDisjunction Goes Here */

  if (logical_exclusive_disjunction->expression_1) logical_exclusive_disjunction->expression_1->accept(this);
  if (logical_exclusive_disjunction->expression_2) logical_exclusive_disjunction->expression_2->accept(this);

}

void Skeleton::visitLogicalImplication(LogicalImplication *logical_implication)
{
  /* Code For LogicalImplication Goes Here */

  if (logical_implication->expression_1) logical_implication->expression_1->accept(this);
  if (logical_implication->expression_2) logical_implication->expression_2->accept(this);

}

void Skeleton::visitLogicalEquivalence(LogicalEquivalence *logical_equivalence)
{
  /* Code For LogicalEquivalence Goes Here */

  if (logical_equivalence->expression_1) logical_equivalence->expression_1->accept(this);
  if (logical_equivalence->expression_2) logical_equivalence->expression_2->accept(this);

}

void Skeleton::visitUnaryHashCode(UnaryHashCode *unary_hash_code)
{
  /* Code For UnaryHashCode Goes Here */

  if (unary_hash_code->expression_) unary_hash_code->expression_->accept(this);

}

void Skeleton::visitUnaryMinus(UnaryMinus *unary_minus)
{
  /* Code For UnaryMinus Goes Here */

  if (unary_minus->expression_) unary_minus->expression_->accept(this);

}

void Skeleton::visitTrueTerm(TrueTerm *true_term)
{
  /* Code For TrueTerm Goes Here */


}

void Skeleton::visitFalseTerm(FalseTerm *false_term)
{
  /* Code For FalseTerm Goes Here */


}

void Skeleton::visitEmptyTerm(EmptyTerm *empty_term)
{
  /* Code For EmptyTerm Goes Here */


}

void Skeleton::visitStringTerm(StringTerm *string_term)
{
  /* Code For StringTerm Goes Here */

  visitString(string_term->string_);

}

void Skeleton::visitIntegerTerm(IntegerTerm *integer_term)
{
  /* Code For IntegerTerm Goes Here */

  visitInteger(integer_term->integer_);

}

void Skeleton::visitDoubleTerm(DoubleTerm *double_term)
{
  /* Code For DoubleTerm Goes Here */

  visitDouble(double_term->double_);

}

void Skeleton::visitVariableReferenceTerm(VariableReferenceTerm *variable_reference_term)
{
  /* Code For VariableReferenceTerm Goes Here */

  visitIdent(variable_reference_term->ident_);

}

void Skeleton::visitArrayReferenceTerm(ArrayReferenceTerm *array_reference_term)
{
  /* Code For ArrayReferenceTerm Goes Here */

  if (array_reference_term->expression_1) array_reference_term->expression_1->accept(this);
  if (array_reference_term->expression_2) array_reference_term->expression_2->accept(this);

}

void Skeleton::visitFieldReferenceTerm(FieldReferenceTerm *field_reference_term)
{
  /* Code For FieldReferenceTerm Goes Here */

  if (field_reference_term->expression_) field_reference_term->expression_->accept(this);
  visitIdent(field_reference_term->ident_);

}

void Skeleton::visitFunctionCallExpr(FunctionCallExpr *function_call_expr)
{
  /* Code For FunctionCallExpr Goes Here */

  if (function_call_expr->funccall_) function_call_expr->funccall_->accept(this);

}

void Skeleton::visitArrayInitializer(ArrayInitializer *array_initializer)
{
  /* Code For ArrayInitializer Goes Here */

  if (array_initializer->listexpression_) array_initializer->listexpression_->accept(this);

}

void Skeleton::visitRangeExpressionTerm(RangeExpressionTerm *range_expression_term)
{
  /* Code For RangeExpressionTerm Goes Here */

  if (range_expression_term->rangeexpr_) range_expression_term->rangeexpr_->accept(this);

}

void Skeleton::visitFunctionCall(FunctionCall *function_call)
{
  /* Code For FunctionCall Goes Here */

  if (function_call->expression_) function_call->expression_->accept(this);
  if (function_call->listexpression_) function_call->listexpression_->accept(this);

}

void Skeleton::visitRangeExpression(RangeExpression *range_expression)
{
  /* Code For RangeExpression Goes Here */

  if (range_expression->unsteppedrangeexpression_) range_expression->unsteppedrangeexpression_->accept(this);

}

void Skeleton::visitSteppedRangeExpression(SteppedRangeExpression *stepped_range_expression)
{
  /* Code For SteppedRangeExpression Goes Here */

  if (stepped_range_expression->unsteppedrangeexpression_) stepped_range_expression->unsteppedrangeexpression_->accept(this);
  visitInteger(stepped_range_expression->integer_);

}

void Skeleton::visitOpenRange(OpenRange *open_range)
{
  /* Code For OpenRange Goes Here */

  if (open_range->rangebody__) open_range->rangebody__->accept(this);

}

void Skeleton::visitClosedRange(ClosedRange *closed_range)
{
  /* Code For ClosedRange Goes Here */

  if (closed_range->rangebody__) closed_range->rangebody__->accept(this);

}

void Skeleton::visitLeftClosedRightOpenedRange(LeftClosedRightOpenedRange *left_closed_right_opened_range)
{
  /* Code For LeftClosedRightOpenedRange Goes Here */

  if (left_closed_right_opened_range->rangebody__) left_closed_right_opened_range->rangebody__->accept(this);

}

void Skeleton::visitLeftOpenedRightClosedRange(LeftOpenedRightClosedRange *left_opened_right_closed_range)
{
  /* Code For LeftOpenedRightClosedRange Goes Here */

  if (left_opened_right_closed_range->rangebody__) left_opened_right_closed_range->rangebody__->accept(this);

}

void Skeleton::visitRangeBody(RangeBody *range_body)
{
  /* Code For RangeBody Goes Here */

  visitInteger(range_body->integer_1);
  visitInteger(range_body->integer_2);

}


void Skeleton::visitListDecl(ListDecl *list_decl)
{
  for (ListDecl::iterator i = list_decl->begin() ; i != list_decl->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListIdent(ListIdent *list_ident)
{
  for (ListIdent::iterator i = list_ident->begin() ; i != list_ident->end() ; ++i)
  {
    visitIdent(*i) ;
  }
}

void Skeleton::visitListFieldDef(ListFieldDef *list_field_def)
{
  for (ListFieldDef::iterator i = list_field_def->begin() ; i != list_field_def->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListTypeReference(ListTypeReference *list_type_reference)
{
  for (ListTypeReference::iterator i = list_type_reference->begin() ; i != list_type_reference->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListFuncParam(ListFuncParam *list_func_param)
{
  for (ListFuncParam::iterator i = list_func_param->begin() ; i != list_func_param->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListStatement(ListStatement *list_statement)
{
  for (ListStatement::iterator i = list_statement->begin() ; i != list_statement->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListExpression(ListExpression *list_expression)
{
  for (ListExpression::iterator i = list_expression->begin() ; i != list_expression->end() ; ++i)
  {
    (*i)->accept(this);
  }
}


void Skeleton::visitInteger(Integer x)
{
  /* Code for Integer Goes Here */
}

void Skeleton::visitChar(Char x)
{
  /* Code for Char Goes Here */
}

void Skeleton::visitDouble(Double x)
{
  /* Code for Double Goes Here */
}

void Skeleton::visitString(String x)
{
  /* Code for String Goes Here */
}

void Skeleton::visitIdent(Ident x)
{
  /* Code for Ident Goes Here */
}



