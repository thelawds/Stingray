/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef PRINTER_HEADER
#define PRINTER_HEADER

#include "Absyn.H"
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <stdlib.h>


/* Certain applications may improve performance by changing the buffer size */
#define BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
#define _L_PAREN '('
#define _R_PAREN ')'

class PrintAbsyn : public Visitor
{
 protected:
  int _n_, _i_;
  /* The following are simple heuristics for rendering terminals */
  /* You may wish to change them */
  void render(Char c);
  void render(String s);
  void render(const char *s);
  void indent(void);
  void backup(void);
  void onEmptyLine(void);
  void removeTrailingSpaces(void);
  void removeTrailingWhitespace(void);
 public:
  PrintAbsyn(void);
  ~PrintAbsyn(void);
  char *print(Visitable *v);

  void visitProgram_(Program_ *p); /* abstract class */
  void visitProgram(Program *p);
  void visitListDecl(ListDecl *p);
  void iterListDecl(ListDecl::const_iterator i, ListDecl::const_iterator j);
  void visitDecl(Decl *p); /* abstract class */
  void visitDeclaration(Declaration *p);
  void visitTypeReference(TypeReference *p); /* abstract class */
  void visitNothingType(NothingType *p);
  void visitBoolType(BoolType *p);
  void visitIntegerType(IntegerType *p);
  void visitDoubleType(DoubleType *p);
  void visitStringType(StringType *p);
  void visitAutoType(AutoType *p);
  void visitFunctionDeclType(FunctionDeclType *p);
  void visitFunctionDefType(FunctionDefType *p);
  void visitArrayType(ArrayType *p);
  void visitClassType(ClassType *p);
  void visitUserType(UserType *p);
  void visitClassDecl(ClassDecl *p); /* abstract class */
  void visitClassDeclaration(ClassDeclaration *p);
  void visitExtends(Extends *p); /* abstract class */
  void visitExtendsEmpty(ExtendsEmpty *p);
  void visitExtendsList(ExtendsList *p);
  void visitListIdent(ListIdent *p);
  void iterListIdent(ListIdent::const_iterator i, ListIdent::const_iterator j);
  void visitFieldDef(FieldDef *p); /* abstract class */
  void visitFieldDeclaration(FieldDeclaration *p);
  void visitFieldDefinition(FieldDefinition *p);
  void visitFieldDefinitionAsc(FieldDefinitionAsc *p);
  void visitStatics(Statics *p); /* abstract class */
  void visitStaticsEmpty(StaticsEmpty *p);
  void visitStaticsBody(StaticsBody *p);
  void visitListFieldDef(ListFieldDef *p);
  void iterListFieldDef(ListFieldDef::const_iterator i, ListFieldDef::const_iterator j);
  void visitCBody(CBody *p); /* abstract class */
  void visitClassBody(ClassBody *p);
  void visitFuncDecl(FuncDecl *p); /* abstract class */
  void visitFunctionDeclaration(FunctionDeclaration *p);
  void visitFuncDefn(FuncDefn *p); /* abstract class */
  void visitFunctionDefinition(FunctionDefinition *p);
  void visitFuncDomain(FuncDomain *p); /* abstract class */
  void visitFunctionDomain(FunctionDomain *p);
  void visitFuncRange(FuncRange *p); /* abstract class */
  void visitFunctionRangeSingle(FunctionRangeSingle *p);
  void visitFunctionRangeMultiple(FunctionRangeMultiple *p);
  void visitListTypeReference(ListTypeReference *p);
  void iterListTypeReference(ListTypeReference::const_iterator i, ListTypeReference::const_iterator j);
  void visitFuncParam(FuncParam *p); /* abstract class */
  void visitFunctionParameter(FunctionParameter *p);
  void visitFuncRangeNamed(FuncRangeNamed *p); /* abstract class */
  void visitFunctionRangeSingleNamed(FunctionRangeSingleNamed *p);
  void visitFunctionRangeMultipleNamed(FunctionRangeMultipleNamed *p);
  void visitListFuncParam(ListFuncParam *p);
  void iterListFuncParam(ListFuncParam::const_iterator i, ListFuncParam::const_iterator j);
  void visitStatement(Statement *p); /* abstract class */
  void visitStatementVarDecl(StatementVarDecl *p);
  void visitStatementVarDef(StatementVarDef *p);
  void visitStatementVarDefAsc(StatementVarDefAsc *p);
  void visitStatementAssignment(StatementAssignment *p);
  void visitStatementIf(StatementIf *p);
  void visitStatementWhile(StatementWhile *p);
  void visitStatementFor(StatementFor *p);
  void visitStatementReturnNone(StatementReturnNone *p);
  void visitStatementReturnValue(StatementReturnValue *p);
  void visitStatementFunctionCall(StatementFunctionCall *p);
  void visitStatementIf_(StatementIf_ *p); /* abstract class */
  void visitIfStatement(IfStatement *p);
  void visitIfElseIfStatement(IfElseIfStatement *p);
  void visitIfElseStatement(IfElseStatement *p);
  void visitBody_(Body_ *p); /* abstract class */
  void visitBody(Body *p);
  void visitValue(Value *p); /* abstract class */
  void visitValueArrowed(ValueArrowed *p);
  void visitValueBraced(ValueBraced *p);
  void visitListStatement(ListStatement *p);
  void iterListStatement(ListStatement::const_iterator i, ListStatement::const_iterator j);
  void visitExpression(Expression *p); /* abstract class */
  void visitMethodReference(MethodReference *p);
  void visitRelationalEquals(RelationalEquals *p);
  void visitRelationalNotEquals(RelationalNotEquals *p);
  void visitRelationalLess(RelationalLess *p);
  void visitRelationalGreater(RelationalGreater *p);
  void visitRelationalLessOrEqual(RelationalLessOrEqual *p);
  void visitRelationalGreaterOrEqual(RelationalGreaterOrEqual *p);
  void visitArithmeticSum(ArithmeticSum *p);
  void visitArithmeticDifference(ArithmeticDifference *p);
  void visitArithmeticProduct(ArithmeticProduct *p);
  void visitArithmeticQuotient(ArithmeticQuotient *p);
  void visitArithmeticModulus(ArithmeticModulus *p);
  void visitArithmeticExponentiation(ArithmeticExponentiation *p);
  void visitLogicalUnaryNot(LogicalUnaryNot *p);
  void visitLogicalConjunction(LogicalConjunction *p);
  void visitLogicalDisjunction(LogicalDisjunction *p);
  void visitLogicalExclusiveDisjunction(LogicalExclusiveDisjunction *p);
  void visitLogicalImplication(LogicalImplication *p);
  void visitLogicalEquivalence(LogicalEquivalence *p);
  void visitUnaryHashCode(UnaryHashCode *p);
  void visitUnaryMinus(UnaryMinus *p);
  void visitTrueTerm(TrueTerm *p);
  void visitFalseTerm(FalseTerm *p);
  void visitEmptyTerm(EmptyTerm *p);
  void visitStringTerm(StringTerm *p);
  void visitIntegerTerm(IntegerTerm *p);
  void visitDoubleTerm(DoubleTerm *p);
  void visitVariableReferenceTerm(VariableReferenceTerm *p);
  void visitArrayReferenceTerm(ArrayReferenceTerm *p);
  void visitFieldReferenceTerm(FieldReferenceTerm *p);
  void visitFunctionCallExpr(FunctionCallExpr *p);
  void visitArrayInitializer(ArrayInitializer *p);
  void visitRangeExpressionTerm(RangeExpressionTerm *p);
  void visitFuncCall(FuncCall *p); /* abstract class */
  void visitFunctionCall(FunctionCall *p);
  void visitListExpression(ListExpression *p);
  void iterListExpression(ListExpression::const_iterator i, ListExpression::const_iterator j);
  void visitRangeExpr(RangeExpr *p); /* abstract class */
  void visitRangeExpression(RangeExpression *p);
  void visitSteppedRangeExpression(SteppedRangeExpression *p);
  void visitUnsteppedRangeExpression(UnsteppedRangeExpression *p); /* abstract class */
  void visitOpenRange(OpenRange *p);
  void visitClosedRange(ClosedRange *p);
  void visitLeftClosedRightOpenedRange(LeftClosedRightOpenedRange *p);
  void visitLeftOpenedRightClosedRange(LeftOpenedRightClosedRange *p);
  void visitRangeBody_(RangeBody_ *p); /* abstract class */
  void visitRangeBody(RangeBody *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};



class ShowAbsyn : public Visitor
{
 public:
  ShowAbsyn(void);
  ~ShowAbsyn(void);
  char *show(Visitable *v);

  void visitProgram_(Program_ *p); /* abstract class */
  void visitProgram(Program *p);
  void visitListDecl(ListDecl *p);
  void iterListDecl(ListDecl::const_iterator i, ListDecl::const_iterator j);
  void visitDecl(Decl *p); /* abstract class */
  void visitDeclaration(Declaration *p);
  void visitTypeReference(TypeReference *p); /* abstract class */
  void visitNothingType(NothingType *p);
  void visitBoolType(BoolType *p);
  void visitIntegerType(IntegerType *p);
  void visitDoubleType(DoubleType *p);
  void visitStringType(StringType *p);
  void visitAutoType(AutoType *p);
  void visitFunctionDeclType(FunctionDeclType *p);
  void visitFunctionDefType(FunctionDefType *p);
  void visitArrayType(ArrayType *p);
  void visitClassType(ClassType *p);
  void visitUserType(UserType *p);
  void visitClassDecl(ClassDecl *p); /* abstract class */
  void visitClassDeclaration(ClassDeclaration *p);
  void visitExtends(Extends *p); /* abstract class */
  void visitExtendsEmpty(ExtendsEmpty *p);
  void visitExtendsList(ExtendsList *p);
  void visitListIdent(ListIdent *p);
  void iterListIdent(ListIdent::const_iterator i, ListIdent::const_iterator j);
  void visitFieldDef(FieldDef *p); /* abstract class */
  void visitFieldDeclaration(FieldDeclaration *p);
  void visitFieldDefinition(FieldDefinition *p);
  void visitFieldDefinitionAsc(FieldDefinitionAsc *p);
  void visitStatics(Statics *p); /* abstract class */
  void visitStaticsEmpty(StaticsEmpty *p);
  void visitStaticsBody(StaticsBody *p);
  void visitListFieldDef(ListFieldDef *p);
  void iterListFieldDef(ListFieldDef::const_iterator i, ListFieldDef::const_iterator j);
  void visitCBody(CBody *p); /* abstract class */
  void visitClassBody(ClassBody *p);
  void visitFuncDecl(FuncDecl *p); /* abstract class */
  void visitFunctionDeclaration(FunctionDeclaration *p);
  void visitFuncDefn(FuncDefn *p); /* abstract class */
  void visitFunctionDefinition(FunctionDefinition *p);
  void visitFuncDomain(FuncDomain *p); /* abstract class */
  void visitFunctionDomain(FunctionDomain *p);
  void visitFuncRange(FuncRange *p); /* abstract class */
  void visitFunctionRangeSingle(FunctionRangeSingle *p);
  void visitFunctionRangeMultiple(FunctionRangeMultiple *p);
  void visitListTypeReference(ListTypeReference *p);
  void iterListTypeReference(ListTypeReference::const_iterator i, ListTypeReference::const_iterator j);
  void visitFuncParam(FuncParam *p); /* abstract class */
  void visitFunctionParameter(FunctionParameter *p);
  void visitFuncRangeNamed(FuncRangeNamed *p); /* abstract class */
  void visitFunctionRangeSingleNamed(FunctionRangeSingleNamed *p);
  void visitFunctionRangeMultipleNamed(FunctionRangeMultipleNamed *p);
  void visitListFuncParam(ListFuncParam *p);
  void iterListFuncParam(ListFuncParam::const_iterator i, ListFuncParam::const_iterator j);
  void visitStatement(Statement *p); /* abstract class */
  void visitStatementVarDecl(StatementVarDecl *p);
  void visitStatementVarDef(StatementVarDef *p);
  void visitStatementVarDefAsc(StatementVarDefAsc *p);
  void visitStatementAssignment(StatementAssignment *p);
  void visitStatementIf(StatementIf *p);
  void visitStatementWhile(StatementWhile *p);
  void visitStatementFor(StatementFor *p);
  void visitStatementReturnNone(StatementReturnNone *p);
  void visitStatementReturnValue(StatementReturnValue *p);
  void visitStatementFunctionCall(StatementFunctionCall *p);
  void visitStatementIf_(StatementIf_ *p); /* abstract class */
  void visitIfStatement(IfStatement *p);
  void visitIfElseIfStatement(IfElseIfStatement *p);
  void visitIfElseStatement(IfElseStatement *p);
  void visitBody_(Body_ *p); /* abstract class */
  void visitBody(Body *p);
  void visitValue(Value *p); /* abstract class */
  void visitValueArrowed(ValueArrowed *p);
  void visitValueBraced(ValueBraced *p);
  void visitListStatement(ListStatement *p);
  void iterListStatement(ListStatement::const_iterator i, ListStatement::const_iterator j);
  void visitExpression(Expression *p); /* abstract class */
  void visitMethodReference(MethodReference *p);
  void visitRelationalEquals(RelationalEquals *p);
  void visitRelationalNotEquals(RelationalNotEquals *p);
  void visitRelationalLess(RelationalLess *p);
  void visitRelationalGreater(RelationalGreater *p);
  void visitRelationalLessOrEqual(RelationalLessOrEqual *p);
  void visitRelationalGreaterOrEqual(RelationalGreaterOrEqual *p);
  void visitArithmeticSum(ArithmeticSum *p);
  void visitArithmeticDifference(ArithmeticDifference *p);
  void visitArithmeticProduct(ArithmeticProduct *p);
  void visitArithmeticQuotient(ArithmeticQuotient *p);
  void visitArithmeticModulus(ArithmeticModulus *p);
  void visitArithmeticExponentiation(ArithmeticExponentiation *p);
  void visitLogicalUnaryNot(LogicalUnaryNot *p);
  void visitLogicalConjunction(LogicalConjunction *p);
  void visitLogicalDisjunction(LogicalDisjunction *p);
  void visitLogicalExclusiveDisjunction(LogicalExclusiveDisjunction *p);
  void visitLogicalImplication(LogicalImplication *p);
  void visitLogicalEquivalence(LogicalEquivalence *p);
  void visitUnaryHashCode(UnaryHashCode *p);
  void visitUnaryMinus(UnaryMinus *p);
  void visitTrueTerm(TrueTerm *p);
  void visitFalseTerm(FalseTerm *p);
  void visitEmptyTerm(EmptyTerm *p);
  void visitStringTerm(StringTerm *p);
  void visitIntegerTerm(IntegerTerm *p);
  void visitDoubleTerm(DoubleTerm *p);
  void visitVariableReferenceTerm(VariableReferenceTerm *p);
  void visitArrayReferenceTerm(ArrayReferenceTerm *p);
  void visitFieldReferenceTerm(FieldReferenceTerm *p);
  void visitFunctionCallExpr(FunctionCallExpr *p);
  void visitArrayInitializer(ArrayInitializer *p);
  void visitRangeExpressionTerm(RangeExpressionTerm *p);
  void visitFuncCall(FuncCall *p); /* abstract class */
  void visitFunctionCall(FunctionCall *p);
  void visitListExpression(ListExpression *p);
  void iterListExpression(ListExpression::const_iterator i, ListExpression::const_iterator j);
  void visitRangeExpr(RangeExpr *p); /* abstract class */
  void visitRangeExpression(RangeExpression *p);
  void visitSteppedRangeExpression(SteppedRangeExpression *p);
  void visitUnsteppedRangeExpression(UnsteppedRangeExpression *p); /* abstract class */
  void visitOpenRange(OpenRange *p);
  void visitClosedRange(ClosedRange *p);
  void visitLeftClosedRightOpenedRange(LeftClosedRightOpenedRange *p);
  void visitLeftOpenedRightClosedRange(LeftOpenedRightClosedRange *p);
  void visitRangeBody_(RangeBody_ *p); /* abstract class */
  void visitRangeBody(RangeBody *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};




#endif

