/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef SKELETON_HEADER
#define SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"


class Skeleton : public Visitor
{
public:
  void visitProgram_(Program_ *p);
  void visitDecl(Decl *p);
  void visitTypeReference(TypeReference *p);
  void visitClassDecl(ClassDecl *p);
  void visitExtends(Extends *p);
  void visitFieldDef(FieldDef *p);
  void visitStatics(Statics *p);
  void visitCBody(CBody *p);
  void visitFuncDecl(FuncDecl *p);
  void visitFuncDefn(FuncDefn *p);
  void visitFuncDomain(FuncDomain *p);
  void visitFuncRange(FuncRange *p);
  void visitFuncParam(FuncParam *p);
  void visitFuncRangeNamed(FuncRangeNamed *p);
  void visitStatement(Statement *p);
  void visitStatementIf_(StatementIf_ *p);
  void visitBody_(Body_ *p);
  void visitValue(Value *p);
  void visitExpression(Expression *p);
  void visitFuncCall(FuncCall *p);
  void visitRangeExpr(RangeExpr *p);
  void visitUnsteppedRangeExpression(UnsteppedRangeExpression *p);
  void visitRangeBody_(RangeBody_ *p);
  void visitProgram(Program *p);
  void visitDeclaration(Declaration *p);
  void visitNothingType(NothingType *p);
  void visitBoolType(BoolType *p);
  void visitIntegerType(IntegerType *p);
  void visitDoubleType(DoubleType *p);
  void visitStringType(StringType *p);
  void visitSgAutoType(SgAutoType *p);
  void visitFunctionDeclType(FunctionDeclType *p);
  void visitFunctionDefType(FunctionDefType *p);
  void visitArrayType(ArrayType *p);
  void visitClassType(ClassType *p);
  void visitUserType(UserType *p);
  void visitClassDeclaration(ClassDeclaration *p);
  void visitExtendsEmpty(ExtendsEmpty *p);
  void visitExtendsList(ExtendsList *p);
  void visitFieldDeclaration(FieldDeclaration *p);
  void visitFieldDefinition(FieldDefinition *p);
  void visitFieldDefinitionAsc(FieldDefinitionAsc *p);
  void visitStaticsEmpty(StaticsEmpty *p);
  void visitStaticsBody(StaticsBody *p);
  void visitClassBody(ClassBody *p);
  void visitFunctionDeclaration(FunctionDeclaration *p);
  void visitFunctionDefinition(FunctionDefinition *p);
  void visitFunctionDomain(FunctionDomain *p);
  void visitFunctionRangeSingle(FunctionRangeSingle *p);
  void visitFunctionRangeMultiple(FunctionRangeMultiple *p);
  void visitFunctionParameter(FunctionParameter *p);
  void visitFunctionRangeSingleNamed(FunctionRangeSingleNamed *p);
  void visitFunctionRangeMultipleNamed(FunctionRangeMultipleNamed *p);
  void visitStatementVarDecl(StatementVarDecl *p);
  void visitStatementVarDef(StatementVarDef *p);
  void visitStatementVarDefAsc(StatementVarDefAsc *p);
  void visitStatementAssignment(StatementAssignment *p);
  void visitStatementIf(StatementIf *p);
  void visitStatementWhile(StatementWhile *p);
  void visitStatementFor(StatementFor *p);
  void visitStatementReturnNone(StatementReturnNone *p);
  void visitStatementReturnValue(StatementReturnValue *p);
  void visitStatementFunctionCall(StatementFunctionCall *p);
  void visitIfStatement(IfStatement *p);
  void visitIfElseIfStatement(IfElseIfStatement *p);
  void visitIfElseStatement(IfElseStatement *p);
  void visitBody(Body *p);
  void visitValueArrowed(ValueArrowed *p);
  void visitValueBraced(ValueBraced *p);
  void visitMethodReference(MethodReference *p);
  void visitRelationalEquals(RelationalEquals *p);
  void visitRelationalNotEquals(RelationalNotEquals *p);
  void visitRelationalLess(RelationalLess *p);
  void visitRelationalGreater(RelationalGreater *p);
  void visitRelationalLessOrEqual(RelationalLessOrEqual *p);
  void visitRelationalGreaterOrEqual(RelationalGreaterOrEqual *p);
  void visitArithmeticSum(ArithmeticSum *p);
  void visitArithmeticDifference(ArithmeticDifference *p);
  void visitArithmeticProduct(ArithmeticProduct *p);
  void visitArithmeticQuotient(ArithmeticQuotient *p);
  void visitArithmeticModulus(ArithmeticModulus *p);
  void visitArithmeticExponentiation(ArithmeticExponentiation *p);
  void visitLogicalUnaryNot(LogicalUnaryNot *p);
  void visitLogicalConjunction(LogicalConjunction *p);
  void visitLogicalDisjunction(LogicalDisjunction *p);
  void visitLogicalExclusiveDisjunction(LogicalExclusiveDisjunction *p);
  void visitLogicalImplication(LogicalImplication *p);
  void visitLogicalEquivalence(LogicalEquivalence *p);
  void visitUnaryHashCode(UnaryHashCode *p);
  void visitUnaryMinus(UnaryMinus *p);
  void visitTrueTerm(TrueTerm *p);
  void visitFalseTerm(FalseTerm *p);
  void visitEmptyTerm(EmptyTerm *p);
  void visitStringTerm(StringTerm *p);
  void visitIntegerTerm(IntegerTerm *p);
  void visitDoubleTerm(DoubleTerm *p);
  void visitVariableReferenceTerm(VariableReferenceTerm *p);
  void visitArrayReferenceTerm(ArrayReferenceTerm *p);
  void visitFieldReferenceTerm(FieldReferenceTerm *p);
  void visitFunctionCallExpr(FunctionCallExpr *p);
  void visitFunctionCall(FunctionCall *p);
  void visitArrayInitializer(ArrayInitializer *p);
  void visitRangeExpressionTerm(RangeExpressionTerm *p);
  void visitRangeExpression(RangeExpression *p);
  void visitSteppedRangeExpression(SteppedRangeExpression *p);
  void visitOpenRange(OpenRange *p);
  void visitClosedRange(ClosedRange *p);
  void visitLeftClosedRightOpenedRange(LeftClosedRightOpenedRange *p);
  void visitLeftOpenedRightClosedRange(LeftOpenedRightClosedRange *p);
  void visitRangeBody(RangeBody *p);
  void visitListDecl(ListDecl *p);
  void visitListIdent(ListIdent *p);
  void visitListFieldDef(ListFieldDef *p);
  void visitListTypeReference(ListTypeReference *p);
  void visitListFuncParam(ListFuncParam *p);
  void visitListStatement(ListStatement *p);
  void visitListExpression(ListExpression *p);

  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);

};


#endif
