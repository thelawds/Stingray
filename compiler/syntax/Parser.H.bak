/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef PARSER_HEADER_FILE
#define PARSER_HEADER_FILE

#include<vector>
#include<string>
#include<cstdio>
#include "Absyn.H"


Program_* pProgram_(FILE *inp);
Program_* pProgram_(const char *str);
ListDecl* pListDecl(FILE *inp);
ListDecl* pListDecl(const char *str);
Decl* pDecl(FILE *inp);
Decl* pDecl(const char *str);
TypeReference* pTypeReference(FILE *inp);
TypeReference* pTypeReference(const char *str);
Extends* pExtends(FILE *inp);
Extends* pExtends(const char *str);
ListIdent* pListIdent(FILE *inp);
ListIdent* pListIdent(const char *str);
FieldDef* pFieldDef(FILE *inp);
FieldDef* pFieldDef(const char *str);
Statics* pStatics(FILE *inp);
Statics* pStatics(const char *str);
ListFieldDef* pListFieldDef(FILE *inp);
ListFieldDef* pListFieldDef(const char *str);
CBody* pCBody(FILE *inp);
CBody* pCBody(const char *str);
FuncDecl* pFuncDecl(FILE *inp);
FuncDecl* pFuncDecl(const char *str);
FuncDefn* pFuncDefn(FILE *inp);
FuncDefn* pFuncDefn(const char *str);
FuncDomain* pFuncDomain(FILE *inp);
FuncDomain* pFuncDomain(const char *str);
FuncRange* pFuncRange(FILE *inp);
FuncRange* pFuncRange(const char *str);
ListTypeReference* pListTypeReference(FILE *inp);
ListTypeReference* pListTypeReference(const char *str);
FuncParam* pFuncParam(FILE *inp);
FuncParam* pFuncParam(const char *str);
FuncRangeNamed* pFuncRangeNamed(FILE *inp);
FuncRangeNamed* pFuncRangeNamed(const char *str);
ListFuncParam* pListFuncParam(FILE *inp);
ListFuncParam* pListFuncParam(const char *str);
Statement* pStatement(FILE *inp);
Statement* pStatement(const char *str);
StatementIf_* pStatementIf_(FILE *inp);
StatementIf_* pStatementIf_(const char *str);
Body_* pBody_(FILE *inp);
Body_* pBody_(const char *str);
Value* pValue(FILE *inp);
Value* pValue(const char *str);
ListStatement* pListStatement(FILE *inp);
ListStatement* pListStatement(const char *str);
Expression* pExpression(FILE *inp);
Expression* pExpression(const char *str);
Expression* pExpression5(FILE *inp);
Expression* pExpression5(const char *str);
Expression* pExpression6(FILE *inp);
Expression* pExpression6(const char *str);
Expression* pExpression7(FILE *inp);
Expression* pExpression7(const char *str);
Expression* pExpression8(FILE *inp);
Expression* pExpression8(const char *str);
Expression* pExpression4(FILE *inp);
Expression* pExpression4(const char *str);
Expression* pExpression3(FILE *inp);
Expression* pExpression3(const char *str);
Expression* pExpression2(FILE *inp);
Expression* pExpression2(const char *str);
Expression* pExpression1(FILE *inp);
Expression* pExpression1(const char *str);
Expression* pExpression9(FILE *inp);
Expression* pExpression9(const char *str);
Expression* pExpression10(FILE *inp);
Expression* pExpression10(const char *str);
FuncCall* pFuncCall(FILE *inp);
FuncCall* pFuncCall(const char *str);
ListExpression* pListExpression(FILE *inp);
ListExpression* pListExpression(const char *str);
RangeExpr* pRangeExpr(FILE *inp);
RangeExpr* pRangeExpr(const char *str);
UnsteppedRangeExpression* pUnsteppedRangeExpression(FILE *inp);
UnsteppedRangeExpression* pUnsteppedRangeExpression(const char *str);
RangeBody_* pRangeBody_(FILE *inp);
RangeBody_* pRangeBody_(const char *str);


#endif
