
Program ::= {Import} {Declaration}

Import ::= 'import' identifier {'.' identifier} 'as' identifier

Declaration ::= 'declare' identifier as TypeReference #done

TypeReference ::= 'Nothing' | identifier | FunctionDeclarationType | FunctionDefinitionType #done
               | ClassType # done
               | identifier '[]' #done

FunctionDeclarationType ::= FunctionRangeDomain '->' FunctionRangeDomain #done
FunctionDefinitionType  ::= NamedFunctionRange '->' FunctionRangeDomain Body #done
FunctionRangeDomain     ::= TypeReference | '(' [TypeReference {',' TypeReference}] ')' #done
NamedFunctionRange      ::= TypeReference identifier                                    #done
                         | '(' [TypeReference identifier {',' TypeReference identifier}] ')' #done

ClassType        ::= 'class' [ExtendsList] [StaticsBody] "{" [ClassBody] "}" # done

ExtendsList      ::= '<' [identifier] '>'; # done
StaticsBody      ::= '(' FieldDefinition {FieldDefinition} ')' # done
ClassBody        ::= {FieldDefinition} # done

FieldDefinition  ::= identifier [':' TypeReference] [Value] # done
Value            ::= '<-' Expression | '{' Expression '}' # done
Body             ::= '{' {Statement} '}' # done

Statement        ::= 'let' identifier [':' TypeReference] [Value] # done
                   | identifier Value # done
                   | IfStatement # done
                   | 'while' Expression Body # done
                   | 'for' identifier 'in' RangeExpr Body  # done
                   | 'return' Expression  # done
                   | FunctionCall # done

IfStatement     ::= 'if' Expression Body ['else' (IfStatement | Body)]  #done

LambdaExpression ::= '(' {identifier} ')' Body

MethodReference  ::= identifier '::' identifier # done

Expression ::= Unop Expression # done
             | Term [Binop Term] # done
             | LambdaExpression 
             | MethodReference # done
ArrayRef     ::= Term '[' Expression ']' # done
FunctionCall ::= Term '(' [Expression {',' Expression}] ')' # done
FieldRef     ::= Term '.' identifier # done
Term         ::= '(' Expression ')' # done
               | ArrayRef # done
               | FunctionCall #done
               | FieldRef # done
               | ('true' | 'false' | 'empty') # done
               | (numeric | string | identifier) # done
               | '[' [Expression {',' Expression}] ']' # done
               | RangeExpr # done

RangeOpening    ::= '[' | '(' # done
RangeClosing    ::= ']' | ')' # done
RangeExpr       ::= RangeOpening Expression ';' Expression RangeClosing [':' Expression] # done

Unop    ::= '#' | '-' | 'not'
Binop   ::= '=' | '!=' | '<' | '>' | '<=' | '>=' | '+' | '-' | '*' | '/' | '%' | '^' | 'and' | 'xor' | 'or' | '=>' | '<=>' 
          | 'is' # Now not implemented