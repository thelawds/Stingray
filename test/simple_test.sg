
declare sayHello as Nothing -> Nothing

declare SimpleClass as class (
    foo : Integer <- 13
    bar : Double
) {
    classField  <- 12
    
    foox : Integer n -> Integer {
        return n + 1 + foox(n-1) + classField - foo
    }

}

declare ComplexClass as class <SimpleClass> {
    foox: Integer n -> Double {
        return n - 2
    }
}

declare fact as Auto n -> Auto {
    if (n[3][3](1, 2.0) = 0.0) {
        return [1.0]
    }

    return [n[4][1](1, 2.0) * fact(n[1][3](4, 5.2)-1)[0]]
}

declare test as (Auto int, Auto intArr, Auto funcIntDoubleToDouble) -> Auto {
    let i <- int - 12
    let j <- intArr[14] - i

    let result: Auto k -> Auto {
        return i + k - j * funcIntDoubleToDouble[3](12, 33.3)
    }

    return result
}

declare main as String[] args -> Nothing {
    let lambda: Auto k -> Auto {
        let j <- k - 1
        return [j, k]
    }

    let resultLambda {lambda(53)}

    let foo: sayHello 
    let x : Double {empty}
    let y <- 12.32
    x <- 43
    let z {x = y}
    let f <- (12 + x < 45 + y) and (12 < 13) or "abc" <= "abcd" and empty
    let arr <- [12, true, 33.3]
    let arrElem <- arr[5]

    let simpleVariable <- SimpleClass()
    simpleVariable.foox(arr.length)
    let bar <- SimpleClass.bar

    if (f) {
        for i in [1; 5] {
            x  <- i + x
        }
    } else if (z) {
        f <- true
        let x <- "Hello"
    } else {
        let bar <- 1212
        return
    }

}
